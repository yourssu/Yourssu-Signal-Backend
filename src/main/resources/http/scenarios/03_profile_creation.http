### 1. Create profile
POST {{host}}/api/profiles
Authorization: Bearer {{accessToken}}
Content-Type: application/json

{
  "gender": "MALE",
  "department": "컴퓨터학부3",
  "birthYear": 2000,
  "animal": "DOG",
  "contact": "@myinstagram",
  "mbti": "INTJ",
  "nickname": "코딩하는강아지",
  "introSentences": [
    "개발을 좋아하는 3학년입니다",
    "주로 백엔드 개발을 합니다",
    "커피 마시면서 코딩하는 걸 좋아해요"
  ]
}

> {%
    client.test("Profile created successfully", function() {
        client.assert(response.status === 201, "Response status is not 201");
        client.assert(response.body.result.profileId !== undefined, "Profile ID is missing");
        client.assert(response.body.result.uuid !== undefined, "UUID is missing");
    });
    
    client.global.set("maleProfileId", response.body.result.profileId);
    console.log("Male profile created with ID: " + response.body.result.profileId);
%}

###

### 2. Create profile
POST {{host}}/api/profiles
Authorization: Bearer {{accessToken}}
Content-Type: application/json

{
  "gender": "FEMALE",
  "department": "경영학과2",
  "birthYear": 2001,
  "animal": "CAT",
  "contact": "01012345678",
  "mbti": "ENFP",
  "nickname": "춤추는고양이",
  "introSentences": [
    "경영학과 2학년이에요",
    "댄스 동아리 활동 중입니다",
    "맛집 탐방을 좋아해요"
  ]
}

> {%
    client.test("Profile created successfully", function() {
        client.assert(response.status === 201, "Response status is not 201");
        client.assert(response.body.result.profileId !== undefined, "Profile ID is missing");
    });
    
    client.global.set("femaleProfileId", response.body.result.profileId);
    console.log("Female profile created with ID: " + response.body.result.profileId);
%}

###

### 3. Get my profile - Male user
GET {{host}}/api/profiles/uuid
Authorization: Bearer {{accessToken}}

> {%
    client.test("Profile retrieved", function() {
        client.assert(response.status === 200, "Response status is not 200");
        client.assert(response.body.result.profileId === client.global.get("maleProfileId"), "Profile ID mismatch");
        client.assert(response.body.result.gender === "MALE", "Gender mismatch");
    });
%}

###

### 6. Count profiles
GET {{host}}/api/profiles/count

> {%
    client.test("Profile count retrieved", function() {
        client.assert(response.status === 200, "Response status is not 200");
        client.assert(response.body.result.count >= 0, "Invalid count");
    });
    
    console.log("Total profiles: " + response.body.result.count);
%}

###

### 7. Count profiles by gender
GET {{host}}/api/profiles/count?gender=MALE

> {%
    client.test("Male profile count retrieved", function() {
        client.assert(response.status === 200, "Response status is not 200");
        client.assert(response.body.result.count >= 0, "Invalid count");
    });
    
    console.log("Male profiles: " + response.body.result.count);
%}

###

### 8. Get all profiles (Admin only - dev environment)
GET {{host}}/api/profiles?secretKey={{access-key}}

> {%
    client.test("All profiles retrieved", function() {
        client.assert(response.status === 200, "Response status is not 200");
        client.assert(Array.isArray(response.body.result), "Result is not an array");
    });
    
    console.log("Total profiles: " + response.body.result.length);
%}
