### 1. Get random profile - Male user looking for female profiles
GET {{host}}/api/profiles/random?gender=FEMALE
Authorization: Bearer {{maleAccessToken}}

> {%
    client.test("Random profile retrieved", function() {
        client.assert(response.status === 200, "Response status is not 200");
        client.assert(response.body.result.gender === "FEMALE", "Gender mismatch");
    });
    
    client.global.set("randomProfileId", response.body.result.profileId);
    console.log("Random profile ID: " + response.body.result.profileId);
    console.log("Profile nickname: " + response.body.result.nickname);
%}

###

### 2. Get random profile excluding specific IDs
GET {{host}}/api/profiles/random?gender=FEMALE&excludeProfiles={{femaleProfileId}}
Authorization: Bearer {{maleAccessToken}}

> {%
    client.test("Random profile retrieved with exclusion", function() {
        client.assert(response.status === 200, "Response status is not 200");
        client.assert(response.body.result.profileId !== client.global.get("femaleProfileId"), "Excluded profile was returned");
    });
    
    console.log("New random profile ID: " + response.body.result.profileId);
%}

###

### 3. Consume ticket to view contact information
POST {{host}}/api/profiles/contact
Authorization: Bearer {{maleAccessToken}}
Content-Type: application/json

{
  "profileId": {{randomProfileId}}
}

> {%
    client.test("Contact information retrieved", function() {
        client.assert(response.status === 200, "Response status is not 200");
        client.assert(response.body.result.contact !== undefined, "Contact is missing");
    });
    
    client.global.set("purchasedProfileId", response.body.result.profileId);
    console.log("Contact information: " + response.body.result.contact);
    console.log("Profile purchased with ID: " + response.body.result.profileId);
%}

###

### 4. Access purchased profile without consuming ticket
GET {{host}}/api/profiles/{{purchasedProfileId}}
Authorization: Bearer {{maleAccessToken}}

> {%
    client.test("Purchased profile accessed", function() {
        client.assert(response.status === 200, "Response status is not 200");
        client.assert(response.body.result.contact !== undefined, "Contact should be visible");
    });
    
    console.log("Accessing purchased profile - no ticket consumed");
    console.log("Contact: " + response.body.result.contact);
%}

###

### 5. Try to access non-purchased profile
GET {{host}}/api/profiles/{{femaleProfileId}}
Authorization: Bearer {{maleAccessToken}}

> {%
    client.test("Non-purchased profile access denied", function() {
        client.assert(response.status === 403 || response.status === 404, "Should not have access");
    });
    
    console.log("Cannot access non-purchased profile without consuming ticket");
%}

###

### 6. Check remaining tickets after consumption
GET {{host}}/api/viewers/uuid
Authorization: Bearer {{maleAccessToken}}

> {%
    client.test("Ticket balance checked", function() {
        client.assert(response.status === 200, "Response status is not 200");
    });
    
    console.log("Remaining tickets: " + response.body.result.ticket);
    console.log("Used tickets: " + response.body.result.usedTicket);
    console.log("Purchased profiles: " + JSON.stringify(response.body.result.purchasedProfiles));
%}

###

### 7. Add profile to blacklist
POST {{host}}/api/profiles/blacklist
Content-Type: application/json

{
  "profileId": {{randomProfileId}},
  "secretKey": "{{adminSecretKey}}"
}

> {%
    client.test("Profile added to blacklist", function() {
        client.assert(response.status === 201, "Response status is not 201");
    });
    
    console.log("Profile " + client.global.get("randomProfileId") + " added to blacklist");
%}

###

### 8. Try to get blacklisted profile in random selection
# Should not return the blacklisted profile
GET {{host}}/api/profiles/random?gender=FEMALE
Authorization: Bearer {{maleAccessToken}}

> {%
    client.test("Blacklisted profile excluded", function() {
        client.assert(response.status === 200, "Response status is not 200");
        client.assert(response.body.result.profileId !== client.global.get("randomProfileId"), "Blacklisted profile was returned");
    });
    
    console.log("Random profile (excluding blacklisted): " + response.body.result.profileId);
%}

###

### 9. Remove profile from blacklist
DELETE {{host}}/api/profiles/blacklist/{{randomProfileId}}?secretKey={{adminSecretKey}}

> {%
    client.test("Profile removed from blacklist", function() {
        client.assert(response.status === 204, "Response status is not 204");
    });
    
    console.log("Profile " + client.global.get("randomProfileId") + " removed from blacklist");
%}